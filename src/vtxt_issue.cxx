//-*-c++-*-

/*
   Copyright (C) 2019-2022 Xcalibyte (Shenzhen) Limited.
   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at
     http://www.apache.org/licenses/LICENSE-2.0
   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

// ====================================================================
// ====================================================================
//
// Module: vtxt_issue.cxx
//
// ====================================================================
//

#include "rule_desc_blt.h"
#include "vtxt_issue.h"


// ====================================================================
//
// Given a line of vtxt issue, fill up the 'this' with the content
//
// ====================================================================
//
void
VTXT_ISSUE::Print_var_portion(FILE* fp)
{
  fprintf(fp, "[");
  // Issue_paths fid:linenum:descptor w/ separator ','
  if (!Pn_vec().empty()) {
    BOOL firstentry = TRUE;

    _PN_VEC::iterator iter;
    for (iter = Pn_vec().begin(); iter != Pn_vec().end(); ++iter) {
      const char* pn_template = (firstentry)?
        "%d:%d:%d:%d" : ",%d:%d:%d:%d";
      INT fid = iter->File_id();
      INT col = iter->Col_num();
      if (fid == 65535) fid = -1;
      if (col == 4095) col = -1;
      fprintf(fp, pn_template,
              fid,
              iter->Line_num(),
              col,
              iter->Node_desc());
      firstentry = FALSE;
    }
  }
  fprintf(fp, "]\n");
}


// old_version here means version between 0.6 and 0.7.2 : [0.6.0, 0.7.2)
void
VTXT_ISSUE::Print_fix_portion(FILE* fp, BOOL old_version)
{
  // all elements described below are defined by [ ] w/ separator ','
  fprintf(fp, "[%s],[%s],[%s],[%d:%d],[%s],[%s],[%s],[%s],",
          // unique_id for this issue, generated by the caller
          Unique_id(),
          // issue_key, a string generated based on the formula
          Key(),
          // file name
          Fname(),
          // file_id : line_num
          Filenum(),
          Linenum(),
          // defect category such as "Vul"
          Dft_cat_name(),
          // confident level such as "D", "M"
          Conf_info_sym(),
          // builtin code or RBC for CERT
          Rule_code(),
          // flow, context, object sensitivity
          Fco_sens()
    );
  if (Is_cert()) {
    fprintf(fp, "[%s],[%s],", Rule_type(), Error_code());
  }
  fprintf(fp, old_version ? "[%s],#%s#," : "[%s],[%s],",
          // Variable_name
          Vname(),
          // Function_name
          Pname()
    );
}

